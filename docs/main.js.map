{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["const buttons: NodeListOf<HTMLButtonElement> = document.querySelectorAll(\".size\");\nconst playerTurnElement = document.querySelector(\".player.turn\") as HTMLHeadingElement;\nconst resetButton = document.querySelector(\"h3 button\") as HTMLButtonElement;\nlet currentPlayer: \"X\" | \"O\" = \"X\";\nlet gameLocked = false; // checking if the game is over\n\nconst board: (string | null)[] = Array(9).fill(null);\n\n// combinations to win the game there are no other possible combinations\nconst winCombinations: number[][] = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6]\n];\n\n// saving board state and which players turn it is to the local storage\nfunction saveGameState() {\n    localStorage.setItem(\"ticTacToeBoard\", JSON.stringify(board));\n    localStorage.setItem(\"ticTacToePlayer\", currentPlayer);\n    localStorage.setItem(\"ticTacToeLocked\", JSON.stringify(gameLocked));\n}\n\n// loading the game state and player form the local storage\nfunction loadGameState() {\n    const savedBoard = localStorage.getItem(\"ticTacToeBoard\");\n    const savedPlayer = localStorage.getItem(\"ticTacToePlayer\");\n    const savedLocked = localStorage.getItem(\"ticTacToeLocked\");\n\n    if (savedBoard && savedPlayer) {\n        const loadedBoard: (string | null)[] = JSON.parse(savedBoard);\n        loadedBoard.forEach((value, index) => {\n            if (value) {\n                board[index] = value;\n                buttons[index].textContent = value;\n            }\n        });\n        currentPlayer = savedPlayer as \"X\" | \"O\";\n        gameLocked = JSON.parse(savedLocked);\n        playerTurnElement.textContent = `Player turn: ${currentPlayer}`;\n    }\n}\n\n// function checking if there is a win or a draw\nfunction checkWin(): boolean {\n    return winCombinations.some(combination => {\n        const [a, b, c] = combination;\n        return board[a] && board[a] === board[b] && board[a] === board[c];\n    });\n}\n\n// eventlisteners for each button\nbuttons.forEach((button, index) => {\n    // when button is hovered show a X or O\n    button.addEventListener(\"mouseenter\", () => {\n        // show temporary X or O\n        if (!board[index] && !gameLocked) {\n            button.setAttribute(\"data-hover\", currentPlayer);\n        }\n    });\n\n    // when the mouse dosent hover over the button to remove the hover effect\n    button.addEventListener(\"mouseleave\", () => {\n        button.removeAttribute(\"data-hover\");\n    });\n\n    // button click event this is for when the player makes a move\n    button.addEventListener(\"click\", () => {\n        if (!board[index] && !gameLocked) {\n            board[index] = currentPlayer;\n            button.textContent = currentPlayer;\n            button.removeAttribute(\"data-hover\");\n\n            // checking if the current move that was made results in a win\n            if (checkWin()) {\n                playerTurnElement.textContent = `Player ${currentPlayer} wins!`;\n                gameLocked = true; // locking game so that no more turns can be made\n                buttons.forEach(btn => {\n                    btn.disabled = true; // turning of the buttons\n                    btn.removeAttribute(\"data-hover\"); // ensuring that the hover effect dosent work when the game is won\n                });\n                saveGameState(); // saving the final game state\n                return;\n            }\n\n            // checking if there is a draw\n            if (!board.includes(null)) {\n                playerTurnElement.textContent = \"It's a draw!\";\n                gameLocked = true;\n                buttons.forEach(btn => btn.removeAttribute(\"data-hover\"));\n                saveGameState();\n                return;\n            }\n\n            // alternating between players\n            currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\n            playerTurnElement.textContent = `Player turn: ${currentPlayer}`;\n\n            saveGameState(); // saving updated game\n        }\n    });\n});\n\n// function for the reset button\nresetButton.addEventListener(\"click\", () => {\n    board.fill(null);\n    gameLocked = false;\n    buttons.forEach(button => {\n        button.textContent = \"\";\n        button.disabled = false;\n        button.removeAttribute(\"data-hover\");\n    });\n    currentPlayer = \"X\";\n    playerTurnElement.textContent = \"Player turn: X\";\n    localStorage.removeItem(\"ticTacToeBoard\");\n    localStorage.removeItem(\"ticTacToePlayer\");\n});\n\n// loading the game state\nloadGameState();\n"],
  "mappings": "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",
  "names": []
}
